
// brute force
/*class Solution {
    public int minPathSum(int[][] grid) {
        return dfs(grid, 0, 0);
    }
    
    private int dfs(int[][] grid, int row, int col) {
        if(row >= grid.length || col >= grid[0].length) return -1;

        int bottom = dfs(grid, row + 1, col); 
        int right = dfs(grid, row, col + 1); 
        
        int runningSum = 0;
        if(bottom == -1 && right == -1) runningSum = grid[row][col];            
        else if(bottom == -1) runningSum = grid[row][col] + right;
        else if(right == -1) runningSum = grid[row][col] + bottom;
        else runningSum = grid[row][col] + Math.min(bottom, right);
        return runningSum;
    }
}*/

// with memoization
class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[][] dp = new int[n][m];
        return dfs(grid, 0, 0, dp);
    }
    
    private int dfs(int[][] grid, int row, int col, int[][] dp) {
        if(row >= grid.length || col >= grid[0].length) return Integer.MAX_VALUE;
        
        if(row == grid.length - 1 && col == grid[0].length - 1) return grid[row][col];
        
        if(dp[row][col] != 0) return dp[row][col];

        int bottom = dfs(grid, row + 1, col, dp); 
        int right = dfs(grid, row, col + 1, dp); 
        
        dp[row][col] = grid[row][col] + Math.min(bottom, right);
        return dp[row][col];
    }
}

